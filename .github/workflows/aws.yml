# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
##    and best practices on handling the access key credentials.

on:
  push:
    branches: [main]

name: Deploy to Amazon ECS

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: 210552282242.dkr.ecr.us-east-2.amazonaws.com
        ECR_REPOSITORY: employee-service
        IMAGE_TAG: latest
        EKS_CLUSTER_NAME: test
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to EKS.
        #docker tag employeeservice:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        #docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        #echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Setup kubeconfig
      id: setup-kubeconfig
      env:
        EKS_CLUSTER_NAME: test
        AWS-REGION: us-east-2
      run: |
        aws eks --region us-east-2 update-kubeconfig --name test
        
    - name: Deploy k8s yaml
      id: deploy-k8s-yaml
      env:
        K8S_YAML_DIR: ./
        IMAGE_NAME: "210552282242.dkr.ecr.us-east-2.amazonaws.com/employee-service:latest"
      run: |
        # Setup kustomize
        curl -s -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
        ./kustomize edit set image IMAGE_NAME="210552282242.dkr.ecr.us-east-2.amazonaws.com/employee-service:latest"
        ./kustomize build . | kubectl apply -f -
        # Verify deployment
        kubectl rollout status deployment/aws-test
        # List Public IP of cluster
        kubectl get services -o wide
        #kubectl get ingress
